{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/personService.js","App.js","serviceWorker.js","index.js"],"names":["Filter","newFilter","handleNewFilterChange","value","onChange","PersonForm","persons","newName","newNumber","handleNewNameChange","handleNewNumberChage","addPerson","alertOnSubmit","onSubmit","type","Persons","deletePerson","filter","person","name","toLowerCase","includes","map","key","id","number","onClick","baseUrl","axios","get","then","response","data","newPerson","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","useEffect","personService","initialPersons","event","target","preventDefault","personToEdit","find","window","confirm","editedPerson","console","log","addedPerson","concat","catch","error","alert","toString","removedPerson","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.42743587.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({ newFilter, handleNewFilterChange }) => (\n    <p>filter shown with <input value={newFilter} onChange={handleNewFilterChange} /></p>\n)\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = ({ persons, newName, newNumber,\n    handleNewNameChange, handleNewNumberChage,\n    alertOnSubmit, addPerson }) => (\n        <form onSubmit={addPerson}>\n            <div>\n                name: <input value={newName} onChange={handleNewNameChange} />\n            </div>\n            <div>\n                number: <input value={newNumber} onChange={handleNewNumberChage} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n\nexport default PersonForm","import React from 'react'\n\nconst Persons = ({ newFilter, persons, deletePerson }) => {\n    const filteredPersons = newFilter === '' ? persons : persons.filter(person =>\n        person.name.toLowerCase().includes(newFilter.toLowerCase()))\n    return filteredPersons.map(person =>\n        <li key={person.id}>{person.name} {person.number}\n            <button onClick={() => deletePerson(person.id)}>delete</button></li>)\n}\n\nexport default Persons","import axios from 'axios'\n\nconst baseUrl = `/api/persons`\n\nconst getAll = () => axios.get(baseUrl).then(response => response.data)\n\nconst create = newPerson => axios.post(baseUrl, newPerson)\n    .then(response => response.data)\n\nconst update = (id, newPerson) => axios.put(`${baseUrl}/${id}`, newPerson).then(response => response.data)\n\nconst remove = (id) => axios.delete(`${baseUrl}/${id}`).then(response => response.data)\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport personService from './services/personService'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setNewFilter] = useState('')\n\n  useEffect(() => personService.getAll()\n    .then(initialPersons => setPersons(initialPersons)), [])\n\n  const handleNewNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNewNumberChage = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNewFilterChange = (event) => {\n    setNewFilter(event.target.value)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personToEdit = persons.find(person => person.name === newName)\n    if (personToEdit) {\n      if (window.confirm(`Do you want to edit ${personToEdit.name}s number?`)) {\n        personService.update(personToEdit.id, {\n          name: personToEdit.name,\n          number: newNumber\n        }).then(editedPerson => {\n          console.log([...persons.filter(person => person.id !== editedPerson.id), { id: personToEdit.id, name: personToEdit.name, number: newNumber }])\n          setPersons([...persons.filter(person => person.id !== editedPerson.id), { id: personToEdit.id, name: personToEdit.name, number: newNumber }])\n          setNewName('')\n          setNewNumber('')\n        })\n      }\n    } else {\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      }\n      personService.create(newPerson)\n        .then(addedPerson => setPersons(persons.concat(addedPerson)))\n        .catch(error => {\n          console.log(error)\n          window.alert(`An error occured: ${error.toString()}`)\n        })\n      setNewName('')\n      setNewNumber('')\n    }\n  }\n\n  const deletePerson = (id) => {\n    console.log(persons.map(\n      person => person.id !== id ? person : null))\n    personService.remove(id)\n      .then(removedPerson => setPersons(persons.filter(\n        person => person.id !== id)))\n      .catch(() => setPersons(persons.filter(\n        person => person.id !== id)))\n  }\n\n  const alertOnSubmit = (event) => {\n    event.preventDefault()\n    window.alert(`${newName} is already added to the phonebook!`)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter newFilter={newFilter} handleNewFilterChange={handleNewFilterChange} />\n      <h2>add a new</h2>\n      <PersonForm persons={persons} newName={newName} newNumber={newNumber}\n        handleNewNameChange={handleNewNameChange} addPerson={addPerson}\n        handleNewNumberChage={handleNewNumberChage} alertOnSubmit={alertOnSubmit} />\n      <h2>Numbers</h2>\n      <Persons newFilter={newFilter} persons={persons} deletePerson={deletePerson} />\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}